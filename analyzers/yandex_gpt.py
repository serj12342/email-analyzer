from yandex_cloud_ml_sdk import YCloudML
import os
import logging
import pkg_resources

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='shared/logs/yandex_gpt.log', level=logging.DEBUG)

def summarize_report(report_path):
    auth_token = os.getenv("YC_AUTH")
    folder_id = os.getenv("YC_FOLDER_ID")

    if not auth_token or not folder_id:
        logging.error("YC_AUTH or YC_FOLDER_ID not set")
        return "üîï GPT –æ—Ç–∫–ª—é—á–µ–Ω: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ YC_AUTH –∏ YC_FOLDER_ID –Ω–µ –∑–∞–¥–∞–Ω—ã."

    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏—é SDK
        sdk_version = pkg_resources.get_distribution("yandex_cloud_ml_sdk").version
        logging.debug(f"Using yandex_cloud_ml_sdk version: {sdk_version}")

        # –ß–∏—Ç–∞–µ–º –æ—Ç—á–µ—Ç
        with open(report_path, 'r', encoding='utf-8') as f:
            report_text = f.read().strip()

        if not report_text:
            logging.error(f"Report file {report_path} is empty")
            return "‚ùå –û—à–∏–±–∫–∞: –û—Ç—á–µ—Ç –ø—É—Å—Ç–æ–π, —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞"

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
        max_text_length = 10000
        if len(report_text) > max_text_length:
            report_text = report_text[:max_text_length] + "... [truncated]"
            logging.warning(f"Report text truncated to {max_text_length} characters")

        logging.debug(f"Report text length: {len(report_text)} characters")
        logging.debug(f"Report text preview: {report_text[:200]}...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ ASCII –∏–ª–∏ UTF-8)
        try:
            report_text.encode('utf-8')
        except UnicodeEncodeError:
            logging.error("Report contains invalid characters")
            return "‚ùå –û—à–∏–±–∫–∞: –û—Ç—á–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã"

        sdk = YCloudML(folder_id=folder_id, auth=auth_token)
        model = sdk.models.completions("yandexgpt", model_version="latest")  # –ü—Ä–æ–±—É–µ–º latest
        model = model.configure(temperature=0.3)

        messages = [
            {
                "role": "system",
                "text": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã –æ–± –∞–Ω–∞–ª–∏–∑–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∏—Å–µ–º, –≤—ã–¥–µ–ª—è—Ç—å –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —É–≥—Ä–æ–∑—ã. –î–∞–π –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –∏ —É–∫–∞–∂–∏, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ñ–∏—à–∏–Ω–≥–∞ –∏–ª–∏ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –ü–û."
            },
            {
                "role": "user",
                "text": f"–°—É–º–º–∞—Ä–∏–∑–∏—Ä—É–π –∏ –æ—Ü–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç—á–µ—Ç –æ–± –∞–Ω–∞–ª–∏–∑–µ –ø–∏—Å—å–º–∞:\n\n{report_text}"
            }
        ]

        logging.debug(f"Sending request to Yandex GPT with messages: {messages}")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        result = model.run(messages)

        logging.debug(f"Yandex GPT result type: {type(result)}")
        logging.debug(f"Yandex GPT result content: {result}")

        if result is None:
            logging.error("Yandex GPT returned None")
            return "‚ùå GPT –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç"

        if not isinstance(result, list):
            logging.error(f"Unexpected result format: {type(result)}")
            return "‚ùå GPT –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç"

        if len(result) == 0:
            logging.error("Yandex GPT returned empty list")
            return "‚ùå GPT –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç text
        if hasattr(result[0], 'text') and result[0].text:
            logging.debug(f"Yandex GPT response: {result[0].text}")
            return result[0].text
        else:
            logging.error("Yandex GPT result has no text attribute or text is empty")
            return "‚ùå GPT –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞"

    except Exception as e:
        logging.error(f"Yandex GPT error: {str(e)}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Yandex GPT: {e}"