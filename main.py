# main.py
import os
import argparse
import datetime
from datetime import datetime, timezone
from analyzers.mail import parse_email
from analyzers.urls import analyze_urls_with_thug
from analyzers.attachments import process_attachments
from analyzers.report import generate_report
from analyzers.yandex_gpt import summarize_report

def print_banner():
    banner = r"""
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°¥‚†Å‚£†‚£∂‚†û‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ë‚†í‚†§‚°Ä‚†Ä‚†Ä‚£Ä‚°†‚†î‚†í‚†â‚†â‚†â‚†ô‚†õ‚†ø‚£∂‚°Ñ‚†Ä‚†Ä‚†Ä‚†à‚£∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†Ä‚°¥‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†ì‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†π‚£Ü‚†Ä‚†Ä‚†Ä‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°û‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚†§‚†í‚†É‚†â‚†â‚†â‚†ë‚†ì‚†∂‚£¶‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚£ß‚°Ä‚¢Ä‚£Ø‚£Ä‚£Ä‚£Ä‚£Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚£∞‚°û‚†Ä‚†Ä‚†Ä‚†Ä‚†ä‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚£Ä‚†Ä‚†â‚¢∑‚†Ä‚†â‚†à‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†Ä‚†õ‚†ø‚£ø‚£Ø‚£π‚£ø‚¢Ø‚°â‚†≥‚£Ñ
‚†Ä‚¢Ä‚£§‚†Ñ‚†Ä‚£©‚£æ‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚°¥‚†æ‚†õ‚†â‚†â‚†â‚†õ‚†ª‚¢∂‚£§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚£ø‚£Ω‚°Ñ‚¢ª‚°Ñ‚†â
‚£∞‚†ü‚†Ä‚¢Ä‚£¥‚†ü‚£ª‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†¥‚¢ü‚£â‚†¥‚£≤‚£ø‚£ø‚£ø‚£Ø‚£≠‚£ñ‚£≤‚£Æ‚£ù‚†∂‚°Ñ‚†Ä‚†Ä‚¢Ä‚°†‚†î‚†í‚†à‚¢â‚£â‚†§‚£§‚£§‚£æ‚£ø‚£ø‚£∂‚¢∑‚£§
‚†Å‚†Ä‚¢†‚°æ‚†ã‚†Ä‚°ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£§‚†¥‚¢æ‚£´‚†µ‚†ü‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ô‚†õ‚†ø‚¢∑‚£û‚°í‚†â‚°Å‚††‚†í‚¢í‚£â‚£µ‚†∂‚†ü‚†õ‚†â‚†Ä‚†à‚†â‚†ô‚°Ü‚†Å
‚†Ä‚£†‚°ü‚†Å‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†ø‚†§‚¢¥‚£∂‚°ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚£ø‚°Ü‚†Ä‚†Ä‚¢Ä‚£à‚£ø‚£∂‚°∂‚†∂‚†ö‚†â‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚£ø‚£∑‚†Ä‚¢Ä‚°á‚†Ä
‚¢∞‚°ü‚†Ä‚†Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢â‚°ª‚†∑‚£¶‚£Ñ‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£à‚£ø‚£µ‚†∂‚†ü‚†õ‚†ø‚£Ø‚£•‚£§‚£§‚£§‚£§‚£§‚£§‚£§‚£§‚£§‚£º‚£ø‚£∂‚£ø‚£ø‚†Å‚†Ä
‚°ø‚†Ä‚¢Ä‚£º‚£Å‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†õ‚†≤‚†¶‚£§‚£≠‚£ç‚£â‚£â‚£â‚£â‚£Ä‚£Ä‚¢†‚°∂‚†Ç‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£∞‚°ø‚†ü‚†ã‚†Å‚†Ä‚†Ä
‚£ü‚£¶‚†û‚†ã‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£†‚£§‚£§‚£§‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°§‚†Ç‚°â‚†ê‚†Ç‚†Ä‚†Ä‚†ê‚††‚†§‚£§‚°§‚†§‚†¥‚†í‚†∫‚£ø‚£ª‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚°ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£¥‚°æ‚†õ‚†ã‚†â‚£â‚£â‚£â‚°â‚†õ‚†õ‚†í‚†∂‚†¶‚†¥‚¢Ø‚£¥‚£ß‚£§‚£§‚£Ñ‚£Ä‚£Ä‚£Ä‚£Ä‚¢Ä‚£Ä‚£Ä‚£†‚£§‚£§‚°∂‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£æ‚°ø‚†ã‚£†‚£§‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£¶‚£§‚£Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†â‚†â‚†õ‚†ô‚¢õ‚¢ª‚£ø‚£ø‚°ø‚¢ª‚£è‚£Å‚£§‚£ø‚°ø‚†É‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚£ø‚†ã‚¢°‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£∂‚£∂‚°æ‚†ü‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†ã‚¢Å‚£Ä‚£Ä‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚†è‚¢†‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£§‚£∂‚£ø‚†ø‚†õ‚†ª‚†ø‚£¶‚°Ä‚†Ä
‚£§‚£æ‚£ª‚°ó‚†Ä‚¢∏‚£ø‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚¢õ‚£ø‚£≠‚£≠‚£≠‚£ø‚£ü‚£õ‚†ø‚¢∑‚£∂‚£§‚£§‚£§‚£§‚£§‚£¥‚£æ‚£ø‚£ø‚£ø‚†ø‚†∑‚£§‚°Ä‚¢à‚°∑‚†Ä
‚°è‚†â‚†â‚†Å‚†Ä‚¢∏‚°ü‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ã‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ø‚¢∑‚£¶‚£¨‚£≠‚£©‚£è‚£Ω‚£ø‚£ø‚°ø‚£ø‚°Å‚†Ä‚†Ä‚†Ä‚†à‚†â‚†â‚†Ä‚†Ä
‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚°Ä‚†à‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†á‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†â‚†õ‚†õ‚†ã‚†â‚†Ä‚†∞‚£§‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚¢ª‚£ß‚°Ä‚†Ä‚†Ä‚°∏‚£ø‚£∑‚°Ä‚†à‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£§‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†æ‚†ø‚£∑‚£Ñ‚†Ä‚†â‚†π‚£ø‚£ß‚£Ñ‚£Ä‚£à‚£ª‚£ø‚£ø‚£ø‚£≠‚£ø‚£ø‚£≠‚£≠‚£â‚£â‚£π‚£ø‚£õ‚£õ‚£õ‚£ª‚£ø‚£ø‚£ø‚†ø‚†ü‚†õ‚†õ‚¢õ‚£õ‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†à‚†õ‚†ø‚¢∂‚£¶‚£æ‚£ü‚£õ‚†ã‚†â‚†â‚†â‚†â‚†â‚†â‚£Ω‚£ø‚†â‚†â‚¢â‚£ø‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚¢õ‚£ª‚£ø‚†ø‚¢ª‚°ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚†â‚†õ‚†õ‚†ø‚†∑‚£∂‚£¶‚£¥‚°ø‚¢ø‚£ø‚°§‚†ñ‚°ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£†‚£¥‚°æ‚†ã‚†â‚†Ä‚¢∏‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†ê‚¢ë‚†Ä‚†Ä‚†à‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°¥‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†æ‚†≠‚¢ç‚£â‚°â‚†â‚†â‚†â‚†â‚†â‚†Å‚†ô‚†ª‚£∑‚£Ñ‚†Ä‚†Ä‚†ò‚£∏‚°á‚†Ä‚†Ñ‚†Ç‚†Ä‚†Ä‚†Ä‚†Ä‚†ê‚††‚¢Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†î‚†ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£†‚†§‚†ñ‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢∑‚£ú‚†ø‚†õ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ñ‚†ò
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£®‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†π‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∞‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
email-analyzer | powered by sad frog intelligence ‚úâÔ∏è
"""
    print(banner)

def log_analysis_result(eml_file, summary):
    os.makedirs("shared/logs", exist_ok=True)
    log_path = "shared/logs/analysis.log"
    timestamp = datetime.now(timezone.utc).isoformat()
    with open(log_path, "a", encoding="utf-8") as log_file:
        log_file.write(f"[{timestamp}] {eml_file}\n")
        log_file.write(summary + "\n\n")

def main():
    samples_dir = "samples"
    eml_files = [f for f in os.listdir(samples_dir) if f.endswith(".eml")]

    if not eml_files:
        print("[!] –ù–µ—Ç .eml —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ samples. –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω.")
        return

    vt_api_key = os.getenv("VT_API_KEY")
    cape_url = os.getenv("CAPE_URL")

    if not vt_api_key:
        print("[!] VirusTotal API –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –Ω–∞ VT.")
    if not cape_url:
        print("[!] CAPE URL –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ CAPE.")

    for eml_file in eml_files:
        eml_path = os.path.join(samples_dir, eml_file)
        print(f"[‚Üí] –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {eml_file}")

        mail_data = parse_email(eml_path)
        thug_results = analyze_urls_with_thug(mail_data['urls'])
        attachment_results = process_attachments(mail_data['attachments'], vt_api_key, cape_url)
        report_path = generate_report(mail_data, thug_results, attachment_results)
        summary = summarize_report(report_path)

        print("\n==== üìÑ –ò—Ç–æ–≥ –æ—Ç GPT ====")
        print(summary)

        summary_path = report_path.replace(".md", "_gpt.txt")
        with open(summary_path, 'w', encoding='utf-8') as f:
            f.write(summary)
        print(f"\n[‚úì] –†–µ–∑—É–ª—å—Ç–∞—Ç GPT —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {summary_path}\n")

        log_analysis_result(eml_file, summary)

if __name__ == "__main__":
    print_banner()
    main()
