# main.py
import os
import argparse
from analyzers.mail import parse_email
from analyzers.urls import analyze_urls_with_thug
from analyzers.attachments import process_attachments
from analyzers.report import generate_report
from analyzers.yandex_gpt import summarize_report

def print_banner():
    banner = r"""
 ______        _ _       _                 _                            
|  ____|      (_) |     | |               | |                           
| |__    _ __  _| |_ ___| |__   ___   ___ | | ___   __ _ _ __ ___   ___ 
|  __|  | '_ \| | __/ __| '_ \ / _ \ / _ \| |/ _ \ / _` | '_ ` _ \ / _ \
| |____ | | | | | || (__| | | | (_) | (_) | | (_) | (_| | | | | | |  __/
|______||_| |_|_|\__\___|_| |_|\___/ \___/|_|\___/ \__, |_| |_| |_|\___|
                                                   __/ |               
                                                  |___/                
email-analyzer v1.0 | sandbox your spam ‚úâÔ∏è
"""
    print(banner)

def main(eml_path):
    if not os.path.exists(eml_path):
        print(f"‚ùå –§–∞–π–ª {eml_path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ª–æ–∂–∏—Ç–µ .eml –≤ –ø–∞–ø–∫—É /samples/")
        return

    print(f"[üîç] –ù–∞—á–∞—Ç –∞–Ω–∞–ª–∏–∑ –ø–∏—Å—å–º–∞: {eml_path}")

    vt_api_key = os.getenv("VT_API_KEY")
    cape_url = os.getenv("CAPE_URL")

    if not vt_api_key or not cape_url:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è VT_API_KEY –∏ CAPE_URL –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.")
        return

    print("[üì®] –ü–∞—Ä—Å–∏–Ω–≥ –ø–∏—Å—å–º–∞...")
    mail_data = parse_email(eml_path)

    print("[üåê] –ê–Ω–∞–ª–∏–∑ —Å—Å—ã–ª–æ–∫ —á–µ—Ä–µ–∑ Thug...")
    thug_results = analyze_urls_with_thug(mail_data['urls'])

    print("[üìé] –ê–Ω–∞–ª–∏–∑ –≤–ª–æ–∂–µ–Ω–∏–π...")
    attachment_results = process_attachments(
        mail_data['attachments'], vt_api_key, cape_url
    )

    print("[üìù] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞...")
    report_path = generate_report(mail_data, thug_results, attachment_results)

    print("[ü§ñ] –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ –≤ Yandex GPT...")
    summary = summarize_report(report_path)

    print("\n==== üìÑ –ò—Ç–æ–≥ –æ—Ç GPT ====")
    print(summary)

    summary_path = report_path.replace(".md", "_gpt.txt")
    with open(summary_path, 'w', encoding='utf-8') as f:
        f.write(summary)
    print(f"\n[‚úì] –†–µ–∑—É–ª—å—Ç–∞—Ç GPT —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {summary_path}")

if __name__ == "__main__":
    print_banner()
    parser = argparse.ArgumentParser(description="Email Threat Analyzer")
    parser.add_argument("--eml", required=True, help="Path to .eml file")
    args = parser.parse_args()

    main(args.eml)